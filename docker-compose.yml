services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: dnd-game-mongodb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ai-dnd-game
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - dnd-game-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dnd-game-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-5001}
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/ai-dnd-game?authSource=admin
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: ${LOG_FILE:-/var/log/dnd-game/app.log}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      SESSION_MAX_AGE: ${SESSION_MAX_AGE:-86400000}
      MAX_CONTEXT_LENGTH: ${MAX_CONTEXT_LENGTH:-8000}
      CONTEXT_COMPRESSION_THRESHOLD: ${CONTEXT_COMPRESSION_THRESHOLD:-6000}
    ports:
      - "5001:5001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - dnd-game-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT:-5001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        BACKEND_URL: ${BACKEND_URL}
    container_name: dnd-game-frontend
    restart: unless-stopped
    environment:
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      BACKEND_URL: ${BACKEND_URL}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-"AI-Powered D&D Game"}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - dnd-game-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: dnd-game-redis
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dnd-game-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  dnd-game-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
