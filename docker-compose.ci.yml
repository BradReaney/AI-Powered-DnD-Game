version: "3.8"

services:
  # MongoDB for testing
  mongodb-ci:
    image: mongo:7.0
    container_name: mongodb-ci
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: test
    ports:
      - "27017:27017"
    volumes:
      - ./config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for testing
  redis-ci:
    image: redis:7-alpine
    container_name: redis-ci
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Mock LLM Service for testing
  mock-llm-ci:
    build:
      context: ./mock-llm-service
      dockerfile: Dockerfile
    container_name: mock-llm-ci
    environment:
      NODE_ENV: test
      PORT: 5002
    ports:
      - "5002:5002"
    depends_on:
      mongodb-ci:
        condition: service_healthy
      redis-ci:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5002/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend for testing
  backend-ci:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-ci
    environment:
      NODE_ENV: test
      PORT: 5001
      MONGODB_URI: mongodb://admin:password@mongodb-ci:27017/test?authSource=admin
      REDIS_URL: redis://redis-ci:6379
      USE_MOCK_LLM: true
      MOCK_LLM_URL: http://mock-llm-ci:5002
      GEMINI_API_KEY: test-api-key-for-ci
      JWT_SECRET: test-secret-key
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5001:5001"
    depends_on:
      mongodb-ci:
        condition: service_healthy
      redis-ci:
        condition: service_healthy
      mock-llm-ci:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5001/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # Frontend for testing
  frontend-ci:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:5001
        BACKEND_URL: http://localhost:5001
    container_name: frontend-ci
    environment:
      NODE_ENV: test
      NEXT_PUBLIC_API_URL: http://localhost:5001
      BACKEND_URL: http://localhost:5001
    ports:
      - "3000:3000"
    depends_on:
      backend-ci:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  # Playwright service for running E2E tests
  playwright-ci:
    image: mcr.microsoft.com/playwright/chromium:v1.46.0-jammy
    container_name: playwright-ci
    volumes:
      - .:/app
      - /tmp/playwright:/tmp/playwright
    working_dir: /app/frontend
    environment:
      NODE_ENV: test
      CI: "true"
      NEXT_PUBLIC_API_URL: http://frontend-ci:3000
      BACKEND_URL: http://backend-ci:5001
      PLAYWRIGHT_BASE_URL: http://frontend-ci:3000
      # Only install Chrome to speed up CI
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "0"
      PLAYWRIGHT_CHROMIUM_ONLY: "1"
    depends_on:
      frontend-ci:
        condition: service_healthy
    command: npm run test:e2e:ci

networks:
  default:
    name: dnd-game-ci-network
