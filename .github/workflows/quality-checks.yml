name: Quality Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  BACKEND_URL: "http://localhost:5001"
  NEXT_PUBLIC_API_URL: "http://localhost:5001"

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install all dependencies
        run: npm ci

      - name: Upload dependencies cache
        uses: actions/upload-artifact@v4
        with:
          name: node-modules
          path: |
            node_modules/
            backend/node_modules/
            frontend/node_modules/

  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download dependencies cache
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: .

      - name: Set PATH for node_modules binaries
        run: echo "$PWD/node_modules/.bin" >> $GITHUB_PATH

      - name: Run backend linting
        working-directory: ./backend
        run: npx eslint src/**/*.ts

      - name: Check backend formatting
        working-directory: ./backend
        run: npx prettier --check src/**/*.ts

      - name: Run backend TypeScript compilation
        working-directory: ./backend
        run: npx tsc --noEmit

  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download dependencies cache
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: .

      - name: Set PATH for node_modules binaries
        run: echo "$PWD/node_modules/.bin" >> $GITHUB_PATH

      - name: Run frontend linting
        working-directory: ./frontend
        run: npx eslint . --ext .ts,.tsx

      - name: Check frontend formatting
        working-directory: ./frontend
        run: npx prettier --check . --ext .ts,.tsx

      - name: Run frontend TypeScript compilation
        working-directory: ./frontend
        run: npx tsc --noEmit

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download dependencies cache
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: .

      - name: Set PATH for node_modules binaries
        run: echo "$PWD/node_modules/.bin" >> $GITHUB_PATH

      - name: Verify Playwright configuration
        working-directory: ./frontend
        run: npx playwright --version

  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate quality report
        run: |
          echo "## 🎯 Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Quality: ${{ needs.backend-quality.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Quality: ${{ needs.frontend-quality.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
          echo "### E2E Tests: ${{ needs.e2e-tests.result == 'success' && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.backend-quality.result }}" == "success" && "${{ needs.frontend-quality.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "🎉 **All quality checks passed!** The project maintains its 100% quality status." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some quality checks failed.** Please review the logs above and fix any issues." >> $GITHUB_STEP_SUMMARY
          fi
