name: Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  BACKEND_URL: "http://localhost:5001"
  NEXT_PUBLIC_API_URL: "http://localhost:5001"
  # Test environment variables
  NODE_ENV: "test"
  MONGODB_URI: "mongodb://admin:password@localhost:27017/test?authSource=admin"
  REDIS_URL: "redis://localhost:6379"
  USE_MOCK_LLM: "true"
  MOCK_LLM_URL: "http://localhost:5002"
  GEMINI_API_KEY: "test-api-key-for-ci"
  JWT_SECRET: "test-secret-key"
  CORS_ORIGIN: "http://localhost:3000"
  TEST_MODE: "true"
  SKIP_PERFORMANCE_MONITORING: "true"
  LOG_LEVEL: "error"

jobs:
  # Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm run test:ci

      - name: Upload frontend test coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 30

  # Frontend Quality Checks
  frontend-quality-checks:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run TypeScript compilation check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./frontend
        run: npm run format:check

  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mock-llm:
        image: mcr.microsoft.com/playwright:v1.46.0-jammy
        ports:
          - 5002:5002
        env:
          NODE_ENV: test
          PORT: 5002
        options: >-
          --health-cmd "curl -f http://localhost:5002/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:ci

      - name: Upload backend test coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/
          retention-days: 30

  # Backend Quality Checks
  backend-quality-checks:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run TypeScript compilation check
        working-directory: ./backend
        run: npx tsc --noEmit

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./backend
        run: npm run format:check

  # Quality Report
  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs:
      [
        frontend-unit-tests,
        frontend-quality-checks,
        backend-unit-tests,
        backend-quality-checks,
      ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

      - name: Generate quality report
        run: |
          echo "## 🎯 Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Frontend" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.frontend-unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.frontend-quality-checks.result }}" == "success" ]; then
            echo "✅ Quality Checks: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Quality Checks: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.backend-unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.backend-quality-checks.result }}" == "success" ]; then
            echo "✅ Quality Checks: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Quality Checks: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.frontend-unit-tests.result }}" == "success" ] && [ "${{ needs.frontend-quality-checks.result }}" == "success" ] && [ "${{ needs.backend-unit-tests.result }}" == "success" ] && [ "${{ needs.backend-quality-checks.result }}" == "success" ]; then
            echo "🎉 All checks passed! Code quality is excellent." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some checks failed. Please review and fix the issues." >> $GITHUB_STEP_SUMMARY
          fi
